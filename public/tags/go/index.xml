<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on CB</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on CB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>cborendev@gmail.com (Cole Boren)</managingEditor>
    <webMaster>cborendev@gmail.com (Cole Boren)</webMaster>
    <copyright>Cole Boren (CC BY 4.0)</copyright>
    <lastBuildDate>Wed, 18 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up, Running and Debugging Go Applications with Neovim on WSL</title>
      <link>http://localhost:1313/blog/9-30-24-go-wsl-nvim/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate><author>cborendev@gmail.com (Cole Boren)</author>
      <guid>http://localhost:1313/blog/9-30-24-go-wsl-nvim/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;As a minimalist at heart, I&amp;rsquo;ve always been drawn to simplicity - that&amp;rsquo;s part of what attracted me to Go. Years of skateboarding and wrist injuries, combined with my ADHD-induced tendency to get distracted by complex IDEs, led me to explore Vim motions and Neovim. While my ultimate goal is to run ArchLinux, blast some breakcore, and hack away on Neovim like a true power user, I&amp;rsquo;m not quite there yet. As a Windows user, I wanted to find a middle ground - a way to use Neovim and Go without completely abandoning my current setup. Enter WSL (Windows Subsystem for Linux). This guide is my first attempt at setting up a development environment that combines the best of both worlds: Neovim and Go on WSL, with the added ability to debug and step through code. Fair warning: this is just the beginning. Expect more blogs as I continue to refine and expand my Neovim setup. For now, let&amp;rsquo;s dive into setting up WSL, Go, and the Debug Adapter Protocol (DAP) with Kickstart.nvim. We&amp;rsquo;ll cover everything from WSL installation to configuring Neovim for Go development and debugging.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<hr>
<h2 id="introduction">Introduction</h2>
<p>As a minimalist at heart, I&rsquo;ve always been drawn to simplicity - that&rsquo;s part of what attracted me to Go. Years of skateboarding and wrist injuries, combined with my ADHD-induced tendency to get distracted by complex IDEs, led me to explore Vim motions and Neovim. While my ultimate goal is to run ArchLinux, blast some breakcore, and hack away on Neovim like a true power user, I&rsquo;m not quite there yet. As a Windows user, I wanted to find a middle ground - a way to use Neovim and Go without completely abandoning my current setup. Enter WSL (Windows Subsystem for Linux). This guide is my first attempt at setting up a development environment that combines the best of both worlds: Neovim and Go on WSL, with the added ability to debug and step through code. Fair warning: this is just the beginning. Expect more blogs as I continue to refine and expand my Neovim setup. For now, let&rsquo;s dive into setting up WSL, Go, and the Debug Adapter Protocol (DAP) with Kickstart.nvim. We&rsquo;ll cover everything from WSL installation to configuring Neovim for Go development and debugging.</p>
<h2 id="step-1-installing-wsl">Step 1: Installing WSL</h2>
<ol>
<li>
<p>Open PowerShell as Administrator and run:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">wsl</span> <span class="p">-</span><span class="n">-install</span></span></span></code></pre></div></li>
<li>
<p>Restart your computer when prompted.</p>
</li>
<li>
<p>After restart, open Ubuntu from the Start menu to complete the setup.</p>
</li>
</ol>
<h2 id="step-2-installing-go">Step 2: Installing Go</h2>
<ol>
<li>
<p>Update your package list:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">sudo apt update</span></span></code></pre></div></li>
<li>
<p>Remove any existing Go installation:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">sudo rm -rf /usr/local/go</span></span></code></pre></div></li>
<li>
<p>Download Go 1.22.7, you can use whatever go version you want here</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">wget https://go.dev/dl/go1.22.7.linux-amd64.tar.gz</span></span></code></pre></div></li>
<li>
<p>Extract Go to /usr/local:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">sudo tar -C /usr/local -xzf go1.22.7.linux-amd64.tar.gz</span></span></code></pre></div></li>
<li>
<p>Set up your Go environment:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export GOROOT=/usr/local/go&#39;</span> &gt;&gt; ~/.bashrc
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export PATH=$GOROOT/bin:$PATH&#39;</span> &gt;&gt; ~/.bashrc
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nb">source</span> ~/.bashrc</span></span></code></pre></div></li>
<li>
<p>Verify the installation:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">go version</span></span></code></pre></div></li>
</ol>
<h2 id="step-3-installing-neovim">Step 3: Installing Neovim</h2>
<ol>
<li>
<p>Download the latest Neovim AppImage:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage</span></span></code></pre></div></li>
<li>
<p>Make it executable:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">chmod u+x nvim.appimage</span></span></code></pre></div></li>
<li>
<p>Move it to a directory in your PATH:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">sudo mv nvim.appimage /usr/local/bin/nvim</span></span></code></pre></div></li>
</ol>
<h2 id="step-4-setting-up-kickstartnvim">Step 4: Setting Up Kickstart.nvim</h2>
<ol>
<li>
<p>Before we get started here be sure to checkout my <a href="https://github.com/williycole/dotfiles">dotfiles</a> incase you want to see the final result or need a reference along the way. Also feel free to fork/clone them.</p>
</li>
<li>
<p>Back up your existing Neovim configuration:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">mv ~/.config/nvim ~/.config/nvim.bak</span></span></code></pre></div></li>
<li>
<p>Clone Kickstart.nvim:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">git clone https://github.com/nvim-lua/kickstart.nvim.git ~/.config/nvim</span></span></code></pre></div></li>
</ol>
<h2 id="5-configuring-go-development-and-dap">5. Configuring Go Development and DAP</h2>
<ol>
<li>
<p>Installing Delve Debugger (moved up):</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">go install github.com/go-delve/delve/cmd/dlv@latest</span></span></code></pre></div></li>
<li>
<p>Instead of creating separate files(we can do that later), we&rsquo;ll modify the existing <code>init.lua</code> in the <code>custom/plugins</code> directory. Open <code>~/.config/nvim/lua/custom/plugins/init.lua</code> and add the following content:</p>
</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln">  1</span><span class="cl">   <span class="c1">-- Function to find main.go file in the project incase its not in root</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl"><span class="kd">local</span> <span class="kr">function</span> <span class="nf">find_main_go</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">  3</span><span class="cl">  <span class="kd">local</span> <span class="n">root</span> <span class="o">=</span> <span class="n">vim.fn</span><span class="p">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">  <span class="kd">local</span> <span class="n">main_go</span> <span class="o">=</span> <span class="n">vim.fn</span><span class="p">.</span><span class="n">globpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;**/main.go&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">  <span class="kr">if</span> <span class="o">#</span><span class="n">main_go</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="kr">return</span> <span class="n">vim.fn</span><span class="p">.</span><span class="n">fnamemodify</span><span class="p">(</span><span class="n">main_go</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s1">&#39;:h&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">  <span class="kr">return</span> <span class="n">root</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">
</span></span><span class="line"><span class="ln"> 11</span><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">  <span class="c1">-- Core DAP (Debug Adapter Protocol) plugin</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">    <span class="s1">&#39;mfussenegger/nvim-dap&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">      <span class="c1">-- Creates a beautiful debugger UI</span>
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">      <span class="s1">&#39;rcarriga/nvim-dap-ui&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">      <span class="c1">-- Installs the debug adapters for you</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">      <span class="s1">&#39;williamboman/mason.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">      <span class="s1">&#39;jay-babu/mason-nvim-dap.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">      <span class="c1">-- Add your own debuggers here</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">      <span class="s1">&#39;leoluz/nvim-dap-go&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">      <span class="kd">local</span> <span class="n">dap</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;dap&#39;</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">      <span class="kd">local</span> <span class="n">dapui</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;dapui&#39;</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">      <span class="c1">-- Configure Mason to automatically install DAP adapters</span>
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">      <span class="n">require</span><span class="p">(</span><span class="s1">&#39;mason-nvim-dap&#39;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">        <span class="c1">-- Makes a best effort to setup the various debuggers with</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">        <span class="c1">-- reasonable debug configurations</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">        <span class="n">automatic_setup</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">        <span class="c1">-- You can provide additional configuration to the handlers,</span>
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">        <span class="c1">-- see mason-nvim-dap README for more information</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">        <span class="n">handlers</span> <span class="o">=</span> <span class="p">{},</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">        <span class="c1">-- You&#39;ll need to check that you have the required things installed</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">        <span class="c1">-- online, please don&#39;t ask me how to install them :)</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">        <span class="n">ensure_installed</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">          <span class="c1">-- Update this to ensure that you have the debuggers for the langs you want</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">          <span class="s1">&#39;delve&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">      <span class="c1">-- Basic debugging keymaps, feel free to change to your liking!</span>
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;F5&gt;&#39;</span><span class="p">,</span> <span class="n">dap.continue</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Start/Continue&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;F1&gt;&#39;</span><span class="p">,</span> <span class="n">dap.step_into</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Step Into&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;F2&gt;&#39;</span><span class="p">,</span> <span class="n">dap.step_over</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Step Over&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;F3&gt;&#39;</span><span class="p">,</span> <span class="n">dap.step_out</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Step Out&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;leader&gt;b&#39;</span><span class="p">,</span> <span class="n">dap.toggle_breakpoint</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Toggle Breakpoint&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;leader&gt;B&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">        <span class="n">dap.set_breakpoint</span><span class="p">(</span><span class="n">vim.fn</span><span class="p">.</span><span class="n">input</span> <span class="s1">&#39;Breakpoint condition: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">      <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: Set Breakpoint&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">      <span class="c1">-- Dap UI setup</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">      <span class="c1">-- For more information, see |:help nvim-dap-ui|</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">      <span class="n">dapui.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">        <span class="c1">-- Set icons to characters that are more likely to work in every terminal.</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">        <span class="c1">--    Feel free to remove or use ones that you like more! :)</span>
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">        <span class="c1">--    Don&#39;t feel like these are good choices.</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">        <span class="n">icons</span> <span class="o">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="o">=</span> <span class="s1">&#39;▾&#39;</span><span class="p">,</span> <span class="n">collapsed</span> <span class="o">=</span> <span class="s1">&#39;▸&#39;</span><span class="p">,</span> <span class="n">current_frame</span> <span class="o">=</span> <span class="s1">&#39;*&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">        <span class="n">controls</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">          <span class="n">icons</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="n">pause</span> <span class="o">=</span> <span class="s1">&#39;⏸&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">            <span class="n">play</span> <span class="o">=</span> <span class="s1">&#39;▶&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">            <span class="n">step_into</span> <span class="o">=</span> <span class="s1">&#39;⏎&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">            <span class="n">step_over</span> <span class="o">=</span> <span class="s1">&#39;⏭&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">            <span class="n">step_out</span> <span class="o">=</span> <span class="s1">&#39;⏮&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">            <span class="n">step_back</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">            <span class="n">run_last</span> <span class="o">=</span> <span class="s1">&#39;▶▶&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">            <span class="n">terminate</span> <span class="o">=</span> <span class="s1">&#39;⏹&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">            <span class="n">disconnect</span> <span class="o">=</span> <span class="s1">&#39;⏏&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">          <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">      <span class="c1">-- Toggle to see last session result. Without this, you can&#39;t see session output in case of unhandled exception.</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">      <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;F7&gt;&#39;</span><span class="p">,</span> <span class="n">dapui.toggle</span><span class="p">,</span> <span class="p">{</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;Debug: See last session result&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">      <span class="n">dap.listeners</span><span class="p">.</span><span class="n">after.event_initialized</span><span class="p">[</span><span class="s1">&#39;dapui_config&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dapui.open</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">      <span class="n">dap.listeners</span><span class="p">.</span><span class="n">before.event_terminated</span><span class="p">[</span><span class="s1">&#39;dapui_config&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dapui.close</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">      <span class="n">dap.listeners</span><span class="p">.</span><span class="n">before.event_exited</span><span class="p">[</span><span class="s1">&#39;dapui_config&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dapui.close</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">      <span class="c1">-- Install golang specific config</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">      <span class="n">require</span><span class="p">(</span><span class="s1">&#39;dap-go&#39;</span><span class="p">).</span><span class="n">setup</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">      <span class="c1">-- Override dap-go&#39;s launch configuration so we can find main.go even if it isn&#39;t in the root of our project</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">      <span class="n">dap.configurations</span><span class="p">.</span><span class="n">go</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">          <span class="n">type</span> <span class="o">=</span> <span class="s1">&#39;go&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">          <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Debug&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">          <span class="n">request</span> <span class="o">=</span> <span class="s1">&#39;launch&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">          <span class="n">program</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">            <span class="kr">return</span> <span class="n">find_main_go</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">          <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="6-final-configuration">6. Final Configuration</h2>
<ol>
<li>Open Neovim: <code>nvim</code> and Run <code>:checkhealth</code> to ensure everything is set up correctly.</li>
<li>Optional tease apart the main <code>init.lua</code> file, ie. <code>nvim\init.lua</code>.</li>
</ol>
<ul>
<li>To do this find different sections of code you would like to pull out of the main file. For example see steps and lua snippet below of the auto format configuration that comes with kickstart.</li>
<li>**But before you do this be sure to uncomment  <code>-- { import = 'custom.plugins' }**,</code> in <code>nvim\init.lua</code>, this will allow you to tease apart this main init.lua and place the things you tease apart in <code>nvim\custom\plugin\auto-format.lua</code></li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">-- Everything in the curly braces is alread in the nvim/init.lua, simply cut it out</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">-- and place it in a file within `nvim\custom\plugin\auto-format.lua`, and be sure</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1">-- to include the return</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1">-- ie. return { paste all the code you just cut here }</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1">-- if you do this sytematically you can really clean up the main init.lua file at nvim root dir</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kr">return</span> <span class="p">{</span> <span class="c1">-- Autoformat</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="s1">&#39;stevearc/conform.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="n">event</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;BufWritePre&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="n">cmd</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;ConformInfo&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="n">keys</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">      <span class="s1">&#39;&lt;leader&gt;f&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">      <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s1">&#39;conform&#39;</span><span class="p">).</span><span class="n">format</span> <span class="p">{</span> <span class="n">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">lsp_format</span> <span class="o">=</span> <span class="s1">&#39;fallback&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">      <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">      <span class="n">mode</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">      <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;[F]ormat buffer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="n">opts</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="n">notify_on_error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="n">format_on_save</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">bufnr</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">      <span class="c1">-- Disable &#34;format_on_save lsp_fallback&#34; for languages that don&#39;t</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">      <span class="c1">-- have a well standardized coding style. You can add additional</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">      <span class="c1">-- languages here or re-enable it for the disabled ones.</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">      <span class="kd">local</span> <span class="n">disable_filetypes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">cpp</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">      <span class="kd">local</span> <span class="n">lsp_format_opt</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">      <span class="kr">if</span> <span class="n">disable_filetypes</span><span class="p">[</span><span class="n">vim.bo</span><span class="p">[</span><span class="n">bufnr</span><span class="p">].</span><span class="n">filetype</span><span class="p">]</span> <span class="kr">then</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="n">lsp_format_opt</span> <span class="o">=</span> <span class="s1">&#39;never&#39;</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">      <span class="kr">else</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">        <span class="n">lsp_format_opt</span> <span class="o">=</span> <span class="s1">&#39;fallback&#39;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">      <span class="kr">end</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">      <span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="n">timeout_ms</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">        <span class="n">lsp_format</span> <span class="o">=</span> <span class="n">lsp_format_opt</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="n">formatters_by_ft</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">      <span class="n">lua</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;stylua&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">      <span class="c1">-- Conform can also run multiple formatters sequentially</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">      <span class="c1">-- python = { &#34;isort&#34;, &#34;black&#34; },</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">      <span class="c1">--</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">      <span class="c1">-- You can use &#39;stop_after_first&#39; to run the first available formatter from the list</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">      <span class="c1">-- javascript = { &#34;prettierd&#34;, &#34;prettier&#34;, stop_after_first = true },</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">
</span></span><span class="line"><span class="ln">46</span><span class="cl">      <span class="n">go</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;go/fmt&#39;</span> <span class="p">},</span> <span class="c1">-- NOTE: this isn&#39;t default, I added this for go formatting, the rest in this example is default </span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><ul>
<li>Generally this approach looks roughly as follows.
<ol>
<li>Plugin Location:
<ul>
<li>Plugins must be defined either in the main <code>nvim/init.lua</code> file or within the <code>lua/custom/plugins</code> directory.</li>
</ul>
</li>
<li>Modular Approach:
<ul>
<li>Gradually separating components from the main <code>init.lua</code> is an effective way to experiment with your setup.</li>
<li>Start by isolating small, manageable pieces of configuration.</li>
</ul>
</li>
<li>Hands-on Practice:
This process also provides valuable Neovim editing practice:
<ul>
<li>Open the source file</li>
<li>Use <code>cc</code> to cut the desired code</li>
<li>Navigate to the target location with <code>:Ex</code></li>
<li>Create a new file with <code>%</code> followed by the filename (e.g., <code>my-new-file.lua</code>)</li>
<li>Enter insert mode with <code>i</code>, press return, then <code>Esc</code></li>
<li>Paste the code with <code>p</code></li>
</ul>
</li>
<li>Troubleshooting:
<ul>
<li>When encountering plugin issues, always refer to the plugin&rsquo;s documentation and README.</li>
<li>Check for recent GitHub issues related to the plugin for potential solutions or known problems.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Now you should be fully setup to Debug your Go projects with Neovim on WSL! Obviously there still a lot that could be done to further clean up this setup/debug experience, if you looked at or used my <a href="https://github.com/williycole/dotfiles">dotfiles</a> you might have even noticed plenty of todos as I will likely iterate on this in the future and make another post as I learn/cleanup my neovim setup.</p>
<p>If you have any questions or trouble feel free to leave a comment. I really hope this was helpful to someone, and I appreciate you if you made it this far and are reading this!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
